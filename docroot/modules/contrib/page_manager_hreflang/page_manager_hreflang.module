<?php

/**
 * @file
 * Contains module functionality.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\page_manager\Entity\PageVariant;

/**
 * Implements hook_page_attachments().
 */
function page_manager_hreflang_page_attachments(array &$attachments) {
  $route_match = \Drupal::routeMatch();

  if (!($route = $route_match->getRouteObject()) || !($parameters = $route->getOption('parameters'))) {
    return;
  }

  foreach ($parameters as $name => $options) {
    if (!isset($options['type']) || strpos($options['type'], 'entity:') !== 0) {
      continue;
    }

    $entity = $route_match->getParameter($name);
    if ($entity instanceof PageVariant) {
      $page = $entity->getPage();
      $url = $page->getPath();

      // Load all available languages.
      $languages = \Drupal::languageManager()->getLanguages();
      // Fetch the page configured languages.
      $conf_languages = $page->getThirdPartySetting('page_manager_hreflang', 'languages', []);

      // When no language is configured all languages are used.
      $available_languages = [];
      if (!$languages) {
        $available_languages = $languages;
      }
      else {
        foreach ($conf_languages as $key => $langcode) {
          if ($langcode) {
            $available_languages[$key] = $languages[$langcode];
          }
        }
      }

      // When eventually no languages are available then stop the execution.
      if (!$available_languages) {
        return;
      }

      // Add hreflang tag for each available language.
      foreach ($available_languages as $key => $language) {
        $hreflang = Url::fromUri('internal:' . $url)
          ->setOption('language', $language)
          ->setAbsolute()
          ->toString();
        $attachments['#attached']['html_head_link'][] = [
          [
            'rel' => 'alternative',
            'hreflang' => $language->getId(),
            'href' => $hreflang,
          ],
          TRUE,
        ];
      }
    }

    // The necessary configuration has been added we can stop the execution.
    return;
  }
}

/**
 * Implements hook form_FORM_ID_alter().
 */
function page_manager_hreflang_form_page_manager_general_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Only when the site is multilingual.
  if (\Drupal::languageManager()->isMultilingual()) {
    $languages = \Drupal::languageManager()->getLanguages();
    $options = [];
    foreach ($languages as $key => $language) {
      $options[$language->getId()] = $language->getName();
    }

    $cached_values = $form_state->getTemporaryValue('wizard');

    $default_value = [];
    if (isset($cached_values['page'])) {
      $page = $cached_values['page'];
      $default_value = $page->getThirdPartySetting('page_manager_hreflang', 'languages', []);
    }

    // Add an additional fieldset to allow hreflang configuration.
    $form['page_manager_hreflang'] = [
      '#type' => 'details',
      '#title' => t('Hreflang metatag settings:'),
      'languages' => [
        '#type' => 'checkboxes',
        '#options' => $options,
        '#title' => t('Available translations'),
        '#default_value' => $default_value,
      ],
    ];

    $actions = [
      'submit',
      'update_and_save',
      'finish',
    ];
    foreach ($form['actions'] as $key => &$action) {
      if (in_array($key, $actions)) {
        $action['#submit'][] = 'page_manager_hreflang_form_page_manager_general_form_submit';
      }
    }
  }
}

/**
 * Submit handler: save the hreflang settings for pages.
 *
 * @param array $form
 *   Form structure.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function page_manager_hreflang_form_page_manager_general_form_submit(
  array &$form,
  FormStateInterface $form_state) {

  // Get cached values so the current state can be saved.
  $cached_values = $form_state->getTemporaryValue('wizard');

  if (isset($cached_values['page'])) {
    $page = $cached_values['page'];
    $page->setThirdpartySetting('page_manager_hreflang', 'languages', $form_state->getValue('languages'));

    $cached_values['page'] = $page;

    $form_state->setTemporaryValue('wizard', $cached_values);

    // Check if the page was also saved permanently.
    $trigger = $form_state->getTriggeringElement();
    if (in_array('::finish', $trigger['#submit'])) {
      $page->save();
    }
  }
}
