<?php

/**
 * @file
 * Main module file.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Datetime\Plugin\Field\FieldWidget\TimestampDatetimeWidget;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_field_widget_form_alter().
 *
 * Get rid of the stupid HARDCODED! description for TimestampDatetimeWidget.
 */
function dropsolid_event_core_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if (!$context['widget'] instanceof TimestampDatetimeWidget) {
    return;
  }
  /** @var \Drupal\Core\Field\FieldItemListInterface $list */
  $list = $context['items'];
  if (!in_array($list->getName(), ['date_start', 'date_end'])) {
    return;
  }
  unset($element['value']['#description']);
}

/**
 * Implements hook_themes_installed().
 *
 * Disable some blocks when one of our themes gets installed and this module
 * is already active at the time.
 */
function dropsolid_event_core_themes_installed($theme_list) {
  foreach ($theme_list as $theme) {
    if (in_array($theme, ['dropsolid_starter', 'dropsolid_flex'])) {
      Rocketship::hideBreadcrumbAndTitleBlockOnContentType($theme, 'event');
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Make sure we go after block_themes_installed.
 */
function dropsolid_event_core_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'themes_installed') {
    $group = $implementations['dropsolid_event_core'];
    unset($implementations['dropsolid_event_core']);
    $implementations['dropsolid_event_core'] = $group;
  }
}

/**
 * Implements hook_theme().
 */
function dropsolid_event_core_theme() {
  return [
    'event_daterange' => [
      'variables' => [
        'dates' => NULL,
        'times' => NULL,
        'attributes' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function dropsolid_event_core_theme_suggestions_event_daterange(array $variables) {
  $suggestions = [];

  if (isset($variables['attributes']['class'])) {
    $previous = $variables['theme_hook_original'] . '_';
    foreach ($variables['attributes']['class'] as $class) {
      $suggestions[] = $variables['theme_hook_original'] . '__' . $class;
      $previous .= '_' . $class;
      $suggestions[] = $previous;
    }
  }

  $suggestions = array_unique($suggestions);

  return $suggestions;
}

/**
 * Implements hook_theming_page_attachments().
 */
function dropsolid_event_core_page_attachments(array &$attachments) {

  // ** Load default library for styling if needed.
  // First get active theme name.
  $default_active_theme_name = \Drupal::service('theme.manager')
    ->getActiveTheme()->getName();

  // Get active theme libraries.
  $active_theme_library = \Drupal::service('library.discovery')
    ->getLibraryByName($default_active_theme_name, 'feature_event');

  // Get our default styling library.
  $module_library = \Drupal::service('library.discovery')
    ->getLibraryByName('dropsolid_event_core', 'structural');

  // If a 'structural css' library exists.
  if (isset($module_library)) {

    $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();

    // Check if active theme is NOT flex or starter
    // OR has no library called $active_theme_name/feature_blog
    // AND not in admin
    // load the module's structural css library.
    if (!$is_admin and
      (($default_active_theme_name !== 'dropsolid_flex' and $default_active_theme_name !== 'dropsolid_starter') or !isset($active_theme_library))
    ) {
      $attachments['#attached']['library'][] = 'dropsolid_event_core/structural';
    }
  }

  // ** load the js library we always need.
  $attachments['#attached']['library'][] = 'dropsolid_event_core/f014';
}


/**
 * Implements hook_cloned_node_alter().
 */
function dropsolid_event_core_cloned_node_alter(&$node) {
  // Do not populate entity reference when cloning a node,
  // because it will end up with multiple nodes referencing to same event ID.
  if($node->bundle() == 'event'){
    $node->set('field_events', NULL);
  }
}