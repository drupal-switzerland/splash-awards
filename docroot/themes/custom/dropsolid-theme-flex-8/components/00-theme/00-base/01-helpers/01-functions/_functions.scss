////////////////////////////////////////////////////////////////////////////////
// *
// * Functions: kinda like mixins but shorter syntax (no @include needed)
// *
////////////////////////////////////////////////////////////////////////////////

// * Some handy functions
// =============================================================================

/// Strips the unit from a number.
///
/// @param {Number (With Unit)} $value
///
/// @example scss - Usage
///   $dimension: strip-unit(10em);
///
/// @example css - CSS Output
///   $dimension: 10;
///
/// @return {Number (Unitless)}

@function strip-unit($value) {
  @return ($value / ($value * 0 + 1));
}


// Convert pixels to ems
// eg. for a relational value of 12px write em(12) when the parent is 16px
// if the parent is another value say 24px write em(12, 24)

// @function em($pxval, $base: $em-base) {
//   @if not unitless($pxval) {
//     $pxval: strip-unit($pxval);
//   }
//   @if not unitless($base) {
//     $base: strip-unit($base);
//   }

//   @return ($pxval / $base) * 1em;
// }


// Convert pixels to rems
// eg. for a relational value of 12px write rem(12)
// Assumes $rem-base is the font-size of <html>
// if you change the $rem-base, you'll get different calculations of course
// eg. base 10px => adding rem(10) => 10/10 = 1rem

@function rem($pxval) {
  @if not unitless($pxval) {
    $pxval: strip-unit($pxval);
  }

  $base: $rem-base;
  @if not unitless($base) {
    $base: strip-unit($base);
  }

  @return ($pxval / $base) * 1rem;
}


/// Checks if a list contains a value(s).
///
/// @argument {list} $list
///   The list to check against.
///
/// @argument {list} $values
///   A single value or list of values to check for.
///
/// @return {boolean}
///
/// @access private

@function _contains(
  $list,
  $values...
) {
  @each $value in $values {
    @if type-of(index($list, $value)) != 'number' {
      @return false;
    }
  }

  @return true;
}


/// Builds the `src` list for an `@font-face` declaration.
///
/// @link https://goo.gl/Ru1bKP
///
/// @argument {string} $font-family
///
/// @argument {string} $file-path
///
/// @return {list}
///
/// @require {function} _contains
///
/// @access private

@function _font-source-declaration(
  $font-family,
  $file-path
) {
  $src: ();

  $file-formats: ('svg', 'ttf', 'woff2', 'woff', 'eot');

  $formats-map: (
    eot:   '#{$file-path}.eot?#iefix' format('embedded-opentype'),
    woff2: '#{$file-path}.woff2' format('woff2'),
    woff:  '#{$file-path}.woff' format('woff'),
    ttf:   '#{$file-path}.ttf' format('truetype'),
    svg:   '#{$file-path}.svg##{$font-family}' format('svg'),
  );

  @each $key, $values in $formats-map {
    @if _contains($file-formats, $key) {
      $file-path: nth($values, 1);
      $font-format: nth($values, 2);

      $src: append($src, url($file-path) $font-format, comma);
    }
  }

  @return $src;
}

// Gets an attribute from the sass map
@function sprite-attr($icon, $attr) {
  $newIcon: map-get($iconSprite, $icon);
  @if $newIcon == null {
    @warn "Can't find an icon with the name #{$icon}";
  }
  @return map-get($newIcon, $attr);
}

/* stylelint-disable */
@function icon-attr($icon) {
  $attr: (
    width: sprite-attr($icon, width),
    height: sprite-attr($icon, height),
    x: sprite-attr($icon, backgroundX),
    y: sprite-attr($icon, backgroundY)
  );

  @return $attr;
}
/* stylelint-enable */
