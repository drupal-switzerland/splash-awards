////////////////////////////////////////////////////////////////////////////////
// *
// * Simple CSS grid, with fallbacks
// *
////////////////////////////////////////////////////////////////////////////////


// * Simple CSS-Grid mixins
// =============================================================================

// ** make a uniform grid
//
//    Variables:
//    - $columns: total columns of your grid system
//    - $gap: gap between the columns
//    - $autofit: makes all columns fit in 1 row to fill the space
//                !WARNING! This prevents wrapping
@mixin simple-grid($columns: $grid-columns, $gap: $grid-gap-hor) {
  display: grid;
  // only set gap for columns, because we need row gap fallback for IE
  // so we'll use margins for that
  grid-column-gap: rem($gap);

  // align your grid with top of its container
  justify-content: start;

  // all cells fit in a x-cols grid, 1fr wide
  grid-template-columns: repeat($columns, minmax(0, 1fr));

  .no-cssgrid & {
    display: flex;
    flex-wrap: wrap;
    position: relative;
    min-height: 1px;
    margin-left: #{rem(-$gap / 2)};
    margin-right: #{rem(-$gap / 2)};

    // cells wil be next to each other, without a % width or gaps
  }
}


// ** set width of individual grid cell
//
//    Variables:
//    - $number: number of columns your item is wide
@mixin simple-grid-col($number, $columns: $grid-columns, $gap: $grid-gap-hor) {
  position: relative;
  margin-bottom: rem($gap);
  grid-column-end: span #{$number};

  .no-cssgrid & {
    margin-left: #{rem($gap / 2)};
    margin-right: #{rem($gap / 2)};
    min-height: 1px;
    width: calc(#{100% * $number / $columns} - #{rem($gap)}); // mainly for IE
    flex: 0 0 calc(#{100% * $number / $columns} - #{rem($gap)});
    // IE11 doesn't understand calc() in shorthand
    flex-basis: calc(#{100% * $number / $columns} - #{rem($gap)});
  }
}


// ** pushing call works differently in grid vs flex
//    so we'll fake it using position relative
//
//    Variables:
//    - $size: $number of columns to move
//    - $gap: gap between the columns
@mixin simple-grid-col-pull($number, $columns: $grid-columns, $gap: $grid-gap-hor) {
  position: relative;
  left: calc(-100% / #{$number} - #{rem($gap / 2)});

  .no-cssgrid & {
    display: block;
    left: #{100% * -$number / $columns};
  }
}


// ** pushing call works differently in grid vs flex
//    so we'll fake it using position relative
@mixin simple-grid-col-push($number, $columns: $grid-columns, $gap: $grid-gap-hor) {
  position: relative;
  left: calc(100% / #{$number} + #{rem($gap / 2)});

  .no-cssgrid & {
    display: block;
    left: #{100% * $number / $columns};
  }
}


// ** Create columns, but for different breakpoints
// -- Variables:
//    - 4 or 5 columns sizes
//    - $columns: total columns of your grid system
//    - $gap: gap between the columns
// -- USAGE: @include col-responsive(12, 6, 6, 3)
// --          Creates columns that span 12 columns on bp-xs-small (0-479)
// --          Creates columns that span 6 columns on bp-xs-wide (480-768
// --          Creates columns that span 6 columns on bp-sm (768-940)
// --          Creates columns that span 3 columns on bp-md (940-â€¦)
// --          Creates columns that span 3 columns on bp-lg (1200-infinity)

@mixin simple-grid-col-responsive($col-bp-xs:12, $col-bp-xs-wide:$col-bp-xs, $col-bp-sm:12, $col-bp-md:12, $col-bp-lg: $col-bp-md, $columns: $grid-columns, $gap: $grid-gap-hor) {

  @if ($col-bp-xs-wide == false OR $col-bp-xs == $col-bp-xs-wide) {
    @include bp-xs-only {
      @include simple-grid-col($col-bp-xs);
    }
  } @else {
    @include bp-xs-small-only {
      @include simple-grid-col($col-bp-xs);
    }

    @include bp-xs-wide-only {
      @include simple-grid-col($col-bp-xs-wide);
    }
  }

  @include bp-sm-only {
    @include simple-grid-col($col-bp-sm);
  }

  @if ($col-bp-md == $col-bp-lg) {
    @include bp-md {
      @include simple-grid-col($col-bp-md);
    }
  } @else {
    @include bp-md-only {
      @include simple-grid-col($col-bp-md);
    }
    @include bp-lg {
      @include simple-grid-col($col-bp-lg);
    }
  }
}


// ** create cells that span multiple rows: this is for the row wrapper

@mixin simple-grid-rows($height, $gap: $grid-gap-hor) {
  position: relative;
  height: $height; // need a height in order to stretch over


  .no-cssgrid & {
    display: flex;
    flex-wrap: wrap;
    flex-direction: column; // very important !!!
    margin-left: #{rem(-$gap / 2)};
    margin-right: #{rem(-$gap / 2)};
  }
}

// ** set height of individual grid cell
//
//    Variables:
//    - $height: number of rows your item is high
//    - $rows: number of rows you need in total
//    - $gap: horizontal gap between the cells
@mixin simple-grid-row($height, $rows: 2, $gap: $grid-gap-hor) {

  grid-row-end: span #{$height};

  .no-cssgrid & {
    flex: 0 0 calc(#{100% * $height / $rows} - #{rem($gap)});
    // IE11 doesn't understand calc() in shorthand
    flex-basis: calc(#{100% * $height / $rows} - #{rem($gap)});
  }
}


// * Make grid columns per breakpoint
// =============================================================================

.simple-grid {
  @include simple-grid;
}

// ** generate classes: by column size on the grid
// ** generate push classes: by column position
// ** generate pull classes: by column size


@for $i from 1 through $grid-columns {

  .simple-grid__col--#{$i} {
    @include simple-grid-col($i);
  }

  &.simple-grid__col--pull--#{$i} {
    @include simple-grid-col-pull($i);
  }

  &.simple-grid__col--push--#{$i} {
    @include simple-grid-col-push($i);
  }
}

// // ** responsive classes

// @for $i from 1 through $grid-columns {

//   // ** xs (phone)

//   .simple-grid__col--xs--#{$i} {
//     @include bp-xs-only {
//       @include simple-grid-col($i);
//     }
//   }

//   .simple-grid__col--xs--pull--#{$i} {
//     @include bp-xs-only {
//       @include simple-grid-col-pull($i);
//     }
//   }

//   .simple-grid__col--xs--push--#{$i} {
//     @include bp-xs-only {
//       @include simple-grid-col-push($i);
//     }
//   }

//   // ** xs-wide (phone landscape)

//   .simple-grid__col--xs-wide--#{$i} {
//     @include bp-xs-small-only {
//       @include simple-grid-col($i);
//     }
//   }

//   .simple-grid__col--xs-wide--pull--#{$i} {
//     @include bp-xs-small-only {
//       @include simple-grid-col-pull($i);
//     }
//   }

//   .simple-grid__col--xs-wide--push--#{$i} {
//     @include bp-xs-small-only {
//       @include simple-grid-col-push($i);
//     }
//   }

//   // ** sm (tablet)

//   .simple-grid__col--sm--#{$i} {
//     @include bp-sm {
//       @include simple-grid-col($i);
//     }
//   }

//   .simple-grid__col--sm--pull--#{$i} {
//     @include bp-sm {
//       @include simple-grid-col-pull($i);
//     }
//   }

//   .simple-grid__col--sm--push--#{$i} {
//     @include bp-sm {
//       @include simple-grid-col-push($i);
//     }
//   }

//   // ** md (desktop)

//   .simple-grid__col--md--#{$i} {
//     @include bp-md {
//       @include simple-grid-col($i);
//     }
//   }

//   .simple-grid__col--md--pull--#{$i} {
//     @include bp-md {
//       @include simple-grid-col-pull($i);
//     }
//   }

//   .simple-grid__col--md--push--#{$i} {
//     @include bp-md {
//       @include simple-grid-col-push($i);
//     }
//   }

//   // ** lg (wide)

//   .simple-grid__col--lg--#{$i} {
//     @include bp-lg {
//       @include simple-grid-col($i);
//     }
//   }

//   .simple-grid__col--lg--pull--#{$i} {
//     @include bp-lg {
//       @include simple-grid-col-pull($i);
//     }
//   }

//   .simple-grid__col--lg--push--#{$i} {
//     @include bp-lg {
//       @include simple-grid-col-push($i);
//     }
//   }
// }
